cmake_minimum_required(VERSION 2.8.3)
project(lidar_tracker)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  pcl_conversions
  pcl_ros
  roscpp
  sensor_msgs
  message_generation
  tf
  rosinterface
)

set(CMAKE_CXX_FLAGS "-std=c++11 -O2 -Wall ${CMAKE_CXX_FLAGS}")


## Generate messages in the 'msg' folder
 add_message_files(
   FILES
   centroids.msg
   geometric_rectangle.msg
   vscan_tracked.msg
   vscan_tracked_array.msg
 )

## Generate added messages and services with any dependencies listed here
 generate_messages(
   DEPENDENCIES
   std_msgs 
   geometry_msgs
 )

#set(CMAKE_CXX_FLAGS "-std=c++11 -O2 -Wall ${CMAKE_CXX_FLAGS}")

include_directories(
  ${catkin_INCLUDE_DIRS}
)
link_directories(${PCL_LIBRARY_DIRS})

#euclidean_clustering node
add_executable(euclidean_cluster
  nodes/euclidean_cluster/euclidean_cluster.cpp)

target_link_libraries(euclidean_cluster
  opencv_highgui
  opencv_core
  opencv_contrib
  ${catkin_LIBRARIES}
  ${PCL_LIBRARIES})

add_dependencies(euclidean_cluster
  lidar_tracker_generate_messages_cpp)

#vscan_filling node
add_executable(vscan_filling
  nodes/vscan_filling/vscan_filling.cpp)

target_link_libraries(vscan_filling
  ${catkin_LIBRARIES}
  ${PCL_LIBRARIES})

#fusion node
add_executable(obj_fusion
  nodes/obj_fusion/obj_fusion.cpp)

target_link_libraries(obj_fusion
  ${catkin_LIBRARIES} ${PCL_LIBRARIES} m)

add_dependencies(obj_fusion
  lidar_tracker_generate_messages_cpp
  cv_tracker_generate_messages_cpp
)

# build vehicle tracker
execute_process(
  COMMAND uname -m
  OUTPUT_VARIABLE ARCHITECTURE
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

#set(CMAKE_CXX_FLAGS "-std=c++11 -O2 -Wall -Wno-unused-result -DROS ${CMAKE_CXX_FLAGS}")

if(EXISTS "/usr/local/cuda")
  include_directories(
    ${catkin_INCLUDE_DIRS}
    "/usr/local/cuda/include"
    )

  if("${ARCHITECTURE}" MATCHES "^arm")
    LINK_DIRECTORIES(/usr/lib/arm-linux-gnueabihf/tegra)
  endif()

  set(CUDA_COMPILER "/usr/local/cuda/bin/nvcc")

  if("${ARCHITECTURE}" MATCHES "^arm")
    set(CUDA_LDFLAGS -L/usr/lib/arm-linux-gnueabihf/tegra -lcuda)
  else()
    set(CUDA_LDFLAGS -lcuda)
  endif()

  set(CUDA_CAPABILITY_VERSION_CHECKER
    "${CATKIN_DEVEL_PREFIX}/lib/capability_version_checker"
    )

  add_custom_target(gpu_arch_version_checker)
  add_dependencies(gpu_arch_version_checker
    libdpm_ttic
    )

  execute_process(
    COMMAND ${CUDA_CAPABILITY_VERSION_CHECKER}
    OUTPUT_VARIABLE CUDA_CAPABILITY_VERSION
    OUTPUT_STRIP_TRAILING_WHITESPACE
    )

  if("${CUDA_CAPABILITY_VERSION}" MATCHES "^[1-9][0-9]+$")
    set(CUDA_ARCH "sm_${CUDA_CAPABILITY_VERSION}")
  else()
    set(CUDA_ARCH "sm_52")
  endif()

  #QT Stuff
  set(CMAKE_AUTOMOC ON)
  set(CMAKE_INCLUDE_CURRENT_DIR ON)
  
  find_package(Qt5Core REQUIRED)
  find_package(Qt5Widgets REQUIRED)
  
  #QT Stuff
  
  FIND_PACKAGE(CUDA REQUIRED)
  INCLUDE(FindCUDA)
  
  set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-gencode arch=compute_${CUDA_CAPABILITY_VERSION},code=sm_${CUDA_CAPABILITY_VERSION};-std=c++11)
  
  INCLUDE_DIRECTORIES(${Qt5Core_INCLUDES}
    ${Qt5Widgets_INCLUDES})

  #cuda pf lib
  cuda_add_library(rbsspfvehicletracker
        nodes/vehicle_tracker/rbsspfvehicletracker.cu
        nodes/vehicle_tracker/rbsspfvehicletracker.cuh)

  catkin_package(
    CATKIN_DEPENDS rosinterface
    )

  #qt exe
  include_directories(${Qt5Core_INCLUDES}
    ${Qt5Widgets_INCLUDES}
    nodes/vehicle_tracker/)

  add_definitions(${Qt5Core_DEFINITIONS})
  add_definitions(${Qt5Widgets_DEFINITIONS})
  
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Core_EXECUTABLE_COMPILE_FLAGS}")

  add_executable(vehicle_tracker
    nodes/vehicle_tracker/rbsspfvehicletracker.h
    nodes/vehicle_tracker/main.cpp
    nodes/vehicle_tracker/mainwindow.cpp
    nodes/vehicle_tracker/rbsspfvehicletracker.cpp
    )


  add_dependencies(vehicle_tracker
    moc_mainwindow
    moc_rbsspfvehicletrackre
    vehicle_tracker_ui_mainwindow
    )

  target_link_libraries(vehicle_tracker
    ${catkin_LIBRARIES}
    rosinterface
    ${Qt5Core_LIBRARIES}
    ${Qt5Widgets_LIBRARIES}
    rbsspfvehicletracker
    )


endif()
